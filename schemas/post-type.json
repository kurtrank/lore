{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://raw.githubusercontent.com/kurtrank/lore/refs/heads/main/schemas/post-type.json",
	"title": "Post Type",
	"description": "Custom post type to be registered with WordPress",
	"type": "object",
	"properties": {
		"label": {
			"type": "string",
			"description": "Name of the post type shown in the menu. Usually plural. Defaults to `labels.name`"
		},
		"labels": {
			"type": "object",
			"description": "A set of labels for this post type to be used primarily in the admin",
			"properties": {}
		},
		"description": {
			"type": "string",
			"description": "A short descriptive summary of what the post type is"
		},
		"public": {
			"type": "boolean",
			"description": "Whether a post type is intended for use publicly either via the admin interface or by front-end users",
			"default": false
		},
		"hierarchical": {
			"type": "boolean",
			"description": "Whether the post type is hierarchical (e.g. page). Defaults to `false`",
			"default": false
		},
		"exclude_from_search": {
			"type": "boolean",
			"description": "Whether to exclude posts with this post type from front end search results. Default is the opposite value of `public`"
		},
		"publicly_queryable": {
			"type": "boolean",
			"description": "Whether queries can be performed on the front end for the post type as part of parse_request"
		},
		"show_ui": {
			"type": "boolean",
			"description": "Whether to generate and allow a UI for managing this post type in the admin. Default is value of `public`"
		},
		"show_in_menu": {
			"type": ["boolean", "string"],
			"description": "Where to show the post type in the admin menu. To work, `show_u` must be true. If string, will be placed as a sub-menu of that item. Default is value of `show_ui`"
		},
		"show_in_nav_menus": {
			"type": "boolean",
			"description": "Makes this post type available for selection in navigation menus. Default is value of `public`"
		},
		"show_in_admin_bar": {
			"type": "boolean",
			"description": "Makes this post type available via the admin bar. Default is value of `show_in_menu`"
		},
		"show_in_rest": {
			"type": "boolean",
			"description": "Whether to include the post type in the REST API. Set this to true for the post type to be available in the block editor"
		},
		"rest_base": {
			"type": "string",
			"description": "To change the base URL of REST API route. Default is `post_type`"
		},
		"rest_namespace": {
			"type": "string",
			"description": "To change the namespace URL of REST API route",
			"default": "wp/v2"
		},
		"rest_controller_class": {
			"type": "string",
			"description": "REST API controller class name",
			"default": "WP_REST_Posts_Controller"
		},
		"autosave_rest_controller_class": {
			"type": "string",
			"description": "REST API controller class name",
			"default": "WP_REST_Autosaves_Controller"
		},
		"revisions_rest_controller_class": {
			"type": "string",
			"description": "REST API controller class name",
			"default": "WP_REST_Revisions_Controller"
		},
		"late_route_registration": {
			"type": "boolean",
			"description": "A flag to direct the REST API controllers for autosave / revisions should be registered before/after the post type controller"
		},
		"menu_position": {
			"type": "integer",
			"description": "The position in the menu order the post type should appear. Defaults to `null` (at the bottom)"
		},
		"menu_icon": {
			"type": "string",
			"description": "The URL to the icon to be used for this menu. Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme. Provide a dashicons helper class, or 'none' to leave blank and apply icon with CSS. Defaults to use the posts icon"
		},
		"capability_type": {
			"type": ["string", "array"],
			"description": "The string to use to build the read, edit, and delete capabilities. May be passed as an array to allow for alternative plurals when using this argument as a base to construct the capabilities"
		},
		"capabilities": {
			"type": "array",
			"description": "Array of capabilities for this post type. `capability_type` is used as a base to construct capabilities by default",
			"items": {
				"type": "string"
			}
		},
		"map_meta_cap": {
			"type": "boolean",
			"description": "Whether to use the internal default meta capability handling.",
			"default": false
		},
		"supports": {
			"type": ["boolean", "array"],
			"description": "Core feature(s) the post type supports. Serves as an alias for calling add_post_type_support() directly",
			"items": {
				"type": "string",
				"enum": [
					"title",
					"editor",
					"comments",
					"revisions",
					"trackbacks",
					"author",
					"excerpt",
					"page-attributes",
					"thumbnail",
					"custom-fields",
					"post-formats"
				]
			},
			"default": ["title", "editor"]
		},
		"register_meta_box_cb": {
			"type": ["string", "array"],
			"description": "Provide a callback function that sets up the meta boxes for the edit form. Do remove_meta_box() and add_meta_box() calls in the callback"
		},
		"taxonomies": {
			"type": "array",
			"description": "An array of taxonomy identifiers that will be registered for the post type",
			"items": {
				"type": "string"
			}
		},
		"has_archive": {
			"type": ["boolean", "string"],
			"description": "Whether there should be post type archives, or if a string, the archive slug to use. Will generate the proper rewrite rules if `rewrite` is enabled"
		},
		"rewrite": {
			"type": ["boolean", "object"],
			"description": "Triggers the handling of rewrites for this post type. To prevent rewrite, set to false",
			"properties": {
				"slug": {
					"type": "string",
					"description": "Customize the permastruct slug. Defaults to `post_type` key"
				},
				"with_front": {
					"type": "boolean",
					"description": "Whether the permastruct should be prepended with WP_Rewrite::$front",
					"default": true
				},
				"feeds": {
					"type": "boolean",
					"description": "Whether the feed permastruct should be built for this post type"
				},
				"pages": {
					"type": "boolean",
					"description": "Whether the permastruct should provide for pagination",
					"default": true
				},
				"ep_mask": {
					"type": "integer",
					"description": "Endpoint mask to assign"
				}
			}
		},
		"query_var": {
			"type": ["boolean", "string"],
			"description": "Sets the query_var key for this post type. Defaults to `post_type` key"
		},
		"can_export": {
			"type": "boolean",
			"description": "Whether to allow this post type to be exported",
			"default": true
		},
		"delete_with_user": {
			"type": ["boolean", "null"],
			"description": "Whether to delete posts of this type when deleting a user. If `null` posts are only trashed if the post type supports 'author'",
			"default": null
		},
		"template": {
			"type": "array",
			"description": "Array of blocks to use as the default initial state for an editor session. Each item should be an array containing block name and optional attributes"
		},
		"template_lock": {
			"type": ["boolean", "string"],
			"description": "Whether the block template should be locked if `template` is set",
			"enum": [false, "all", "insert"]
		},
		"meta": {
			"type": "object",
			"description": "Meta fields to register for this post type. The key in this object is used as the meta key",
			"patternProperties": {
				"[a-z-_]+": {
					"type": "object",
					"description": "A meta field to be registered for the post type",
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of data associated with this meta key",
							"enum": [
								"string",
								"boolean",
								"integer",
								"number",
								"array",
								"object"
							]
						},
						"label": {
							"type": "string",
							"description": "A human-readable label of the data attached to this meta key"
						},
						"description": {
							"type": "string",
							"description": "A description of the data attached to this meta key. Automatically shown as the help text of UI controls"
						},
						"single": {
							"type": "boolean",
							"description": "Whether the meta key has one value per object, or an array of values per object"
						},
						"default": {
							"description": "The default value returned from get_metadata() if no value has been set yet"
						},
						"sanitize_callback": {
							"type": ["string", "array"],
							"description": "A function or method to call when sanitizing $meta_key data"
						},
						"auth_callback": {
							"type": ["string", "array"],
							"description": "Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks"
						},
						"show_in_rest": {
							"type": ["boolean", "object"],
							"description": "Whether data associated with this meta key can be considered public and should be accessible via the REST API. A custom post type must also declare support for custom fields for registered meta to be accessible via REST",
							"properties": {
								"prepare_callback": {
									"type": ["string", "array"]
								},
								"schema": {
									"type": "object",
									"description": "Full specification for the data type of this meta field (excluding type as that is already defined above), as well as UI details",
									"properties": {
										"enum": {
											"type": "array",
											"description": "Specific values that the meta field must match"
										},
										"format": {
											"type": "string",
											"description": "Specific format based on the defined data type of the meta field"
										},
										"field": {
											"type": "object",
											"description": "Specific format based on the defined data type of the meta field",
											"properties": {
												"type": {
													"type": "string",
													"description": "Which UI control to render for this meta field",
													"default": "text",
													"enum": [
														"text",
														"textarea",
														"date",
														"object",
														"post-combobox",
														"post-picker-modal",
														"repeater",
														"select",
														"toggle"
													]
												},
												"label": {
													"type": "string",
													"description": "Label text for UI control"
												},
												"options": {
													"type": "array",
													"description": "Options to include in a select UI control",
													"items": {
														"type": "object",
														"properties": {
															"value": {
																"type": "string",
																"description": "Actual value saved to the database"
															},
															"label": {
																"type": "string",
																"description": "Visual label used for the item"
															}
														}
													}
												},
												"empty_label": {
													"type": "string",
													"description": "Visual label for the empty option in a select UI control"
												},
												"group": {
													"type": "string",
													"description": "Panel name under which the UI control should be grouped"
												},
												"location": {
													"type": "string",
													"description": "Whether the UI control should be placed into a panel in the sidebar or below the content",
													"enum": ["sidebar", "bottom"],
													"default": "sidebar"
												}
											}
										},
										"return_format": {
											"type": "string",
											"description": "Preset for transforming the value when retrieving it with `get_meta`. When using `options` for the UI control, can set this to `label` for example"
										},
										"return_format_cb": {
											"type": ["string", "array"],
											"description": "callable to transform the value when retrieving it with `get_meta`"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
